var PiniaScope=function(e,t){"use strict";const o=new Map;function n(e,t=null){const n=o.get(e);if(n)return n;const s=new r(e,t);return o.set(e,s),s}const s={resetForTestingOnly(){[...o.keys()].forEach(e=>o.delete(e))},keys:()=>[...o.keys()],has:e=>!!o.get(e),init:(e,t=null)=>{if(o.has(e)&&t){if(!o.get(e).optionsMatch(t))throw new Error(`Attempting to use an existing pinia scope "${e}" with different options`)}n(e,t)},addStore(e,t){n(e).addStore(t)},mounted(e){n(e).mount()},unmounted(e){const t=o.get(e);t&&(t.unmount(),t.autoDispose&&(t.isUsed()||(t.dispose(),o.delete(e))))},useCount(e){const t=o.get(e);return t?t.useCount:0},dispose(e){const t=o.get(e);t&&t.dispose()}};class r{id;autoDispose=!0;stores=[];_useCount=0;get useCount(){return this._useCount}constructor(e,t=null){this.id=e,t&&"autoDispose"in t&&(this.autoDispose=t.autoDispose)}optionsMatch(e){return this.autoDispose===e.autoDispose}addStore(e){this.stores.push(e)}mount(){this._useCount++}unmount(){this._useCount--}isUsed(){return this._useCount>0}dispose(){this.stores.forEach(e=>e.$dispose())}}const u=Symbol("Pinia Scope Injector Key");function i(e,o=null){const n=t.getCurrentInstance();if(!n)throw new Error("setStoreScope() can only be used inside setup() or functional components.");n.__PINIA_SCOPE__=e,t.provide(u,e),""!==e&&(s.init(e,o),s.mounted(e),t.onUnmounted(()=>{s.unmounted(e)}))}const c=t.defineComponent({name:"StoreScopeProvider",props:{scope:{type:String,required:!0}},setup:(e,{slots:t})=>(i(e.scope),()=>t.default?.()||null)});function d(){const e=t.getCurrentInstance();if(!e)throw new Error("getStoreScope() can only be used inside setup() or functional components.");const o=t.inject(u,"");return e.__PINIA_SCOPE__||o}let p=(e,t)=>`${e}-${t}`;const a=(e,o,n=null)=>{const r=function(e){let t=null;return Object.freeze({lastStoreId:()=>t,clearLastStoreId:()=>t=null,scopedId:o=>(t=o,e?p(e,o):o),useStore:t=>a(t,e),useStoreWithoutScope:e=>a(e,"")})}(o),u=e(r),i=r.lastStoreId();if(r.clearLastStoreId(),!i)throw new Error("Attempting to use a Pinia Scoped Store that did not call scopedId().");const c=u();return c.__PINIA_SCOPE__=o,c.__PINIA_SCOPE_ID__=i,""!==o&&(s.init(o,n),s.addStore(o,c),t.getCurrentInstance()&&(s.mounted(o),t.onUnmounted(()=>{s.unmounted(o)}))),c};return e.SCOPES=s,e.StoreScopeProvider=c,e.getStoreScope=d,e.getStoreWithScope=a,e.setPiniaScopeNameGenerator=function(e){p=e},e.setStoreScope=i,e.useStore=function(e){if(!t.getCurrentInstance())throw new Error("useStore() can only be used inside setup() or functional components.");const o=d();return a(e,o)},e.useStoreWithoutScope=e=>{if(!t.getCurrentInstance())throw new Error("useStoreWithoutScope() can only be used inside setup() or functional components.");return a(e,"")},e}({},Vue);
